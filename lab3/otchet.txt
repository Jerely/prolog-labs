Цель работы.
Целью работы является изучение приемов работы со списками в Прологе, а также более детальное изучение рекурсивного программирования применительно к обработке списков.

Задание 1
Написать программу сортировки списка методом Шелла. Вычисление последовательности шагов сортировки производится в соответствии с методом, предложенным Дональдом Кнутом: ...

Результат выполнения задания 1
Был разработан предикат shell (см. Листинг 1), который имеет следующие аргументы: первый аргумент -- сортируемый список, второй аргумент -- отсортированный список.
Также были разработаны следующие предикаты: initGap, get, set.
Предикат initGap (см. Листинг 2) имеет следующие аргументы: первый аргумент -- длина списка, второй аргумент -- первый gap для сортировки списка.
Предикат get (см. Листинг 3) имеет следующие аргументы: первый аргумент -- список, n-ый элемент которого необходимо получить; второй аргумент -- индекс требуемого элемента; третий -- n-ый элемент списка.
Предикат set (см. Листинг 4) имеет следующие аргументы: первый аргумент -- список, n-ый элемент которого необходимо изменить; второй аргумент -- число n, третий аргумент -- элемент, на который необходимо заменить n-ый элемент списка, четвертый аргумент -- список с измененным n-ым элементом.

Листинг 1. Предикат shell и вспомогательные предикаты while0, while1, while2
Листинг 2. Предикат initGap и вспомогательный предикат ntgp
Листинг 3. Предикат get
Листинг 4. Предикат set

Задание 2
Написать программу сортировки Хоара.

Результат выполнения задания 2
Был разработан предикат qsort (см. Листинг 5), который имеет следующие аргументы: первый аргумент -- сортируемый список, второй аргумент -- отсортированный список.
Также был разработан предикат splitBy (см. Листинг 6), который разделяет список на две половины: в первой половине элементы меньше первого элемента списка, а во второй -- больше первого элемента. Предикат имеет следующие аргументы: первый аргумент -- элемент, по которому разделеяется список, второй аргумент -- делимый список, третий аргумент -- первая половина списка, четвертый -- вторая половина списка.

Листинг 5. Предикат qsort
Листинг 6. Предикат splitBy

Задание 3
Написать программу решения головоломки. 
...

Результат выполнения задания 3
Был разработан предикат star (см. Листинг 7), который имеет единственный аргумент -- список чисел от 1 до 10.
Суммы соседних чисел в списке, а также сумма первого и последнего числа не делятся ни на 3, ни на 5, ни на 7, таким образом, числа из списка можно расставить по периметру пятиконечной звезды таким образом, чтобы сумма чисел на концах любого отрезка не делится ни на 3, ни на 5, ни на 7.
Также были разработаны предикаты digit, divisable, last, unique, div, pred.
Предикат digit определяет множество значений чисел от 1 до 10.
Предикат divisable определяет множество сумм чисел от 1 до 10, которые не делятся ни на 3, ни на 5, ни на 7.
Предикат last имеет два аргумента: первый аргумент -- список, последний элемент которого необходимо получить, второй аргумент -- последний элемент списка.
Предикат unique имеет два аргумента: первый аргумент -- число, уникальность которого относительно определенного списка необходимо проверить, второй аргумент -- список с числами от 1 до 10. Предикат unique определяет, является ли определенное число уникальным относительно определенного списка.
Предикат div определяет, не является ли сумма определенного числа и головы определенного списка делимой на 3, на 5 или на 7. Первый аргумент -- число, второй аргумент -- список.
Предикат pred заполняет список десятью числами от 1 до 10 таким образом, чтобы соседние числа не делились ни на 3, ни на 5, ни на 7, и чтобы все элементы списка были уникальными. Первый аргумент -- заполняемый список, второй аргумент -- 10 минус i-ая итерация цикла заполнения списка числами.

Листинг 7. Предикаты star, digit, divisable, last, unique, div, pred

Задание 4
Написать программу удаления из списка элементов, находящихся на (i * n)-х местах, где i задается в качестве аргумента, а n = 1, 2, 3, . . . .

Результат выполнения задания 4
Был разработан предикат remi (см. Листинг 8), который удаляет из списка элементы, находящиеся на (i * n)-х местах, где n = 1, 2, 3, . . . . Нумерация списка начинается с 1, т.е. первым элементом является элемент под номером 1.
Первый аргумент -- входной список, второй аргумент -- число i, третий аргумент -- выходной список.
Также был разработан предикат hel, который рекурсивно ищет (i * n)-е элементы в списке и удаляет их. Первый аргумент -- входной список, второй аргумент -- число i, третий аргумент -- итерация работы алгоритма, четвертый аргумент -- выходной список.

Листинг 8. Предикаты remi и hel

Вывод
В ходе выполнения данной лабораторной работы я научился работать со списками в Прологе, а также детально изучил рекурсивное программирование на языке Пролог применительно к обработке списков. 
